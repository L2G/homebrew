en:
  blacklist:
    clojure: |-
      Clojure isn't really a program but a library managed as part of a
      project and Leiningen is the user interface to that library.

      To install Clojure you should install Leiningen:
        brew install leiningen
      and then follow the tutorial:
        https://github.com/technomancy/leiningen/blob/stable/doc/TUTORIAL.md
    distributed_with_os_x: Apple distributes %{name} with OS X, you can find it in %{path}.
    gfortran: |-
      GNU Fortran is now provided as part of GCC, and can be installed with:
        brew install gcc
    google_tool: |-
      Installing %{name} system-wide is not recommended; it should be vendored
      in your projects that use it.
    gsutil: Install gsutil with `pip install gsutil`
    haskell_platform: |-
      We no longer package haskell-platform. Consider installing ghc
      and cabal-install instead:
        brew install ghc cabal-install

      A binary installer is available:
        https://www.haskell.org/platform/mac.html
    libiconv: |-
      Apple distributes %{name} with OS X, you can find it in /usr/lib.
      Some build scripts fail to detect it correctly, please check existing
      formulae for solutions.
    lzma: lzma is now part of the xz formula.
    macruby: |-
      MacRuby works better when you install their package:
        http://www.macruby.org/
    osmium: |-
      The creator of Osmium requests that it not be packaged and that people
      use the GitHub master branch instead.
    pil: Instead of PIL, consider `pip install pillow` or `brew install Homebrew/python/pillow`.
    pip: |-
      Homebrew provides pip via: `brew install python`. However you will then
      have two Pythons installed on your Mac, so alternatively you can:
          sudo easy_install pip
    play: |-
      Play 2.3 replaces the play command with activator:
        brew install typesafe-activator

      You can read more about this change at:
        https://www.playframework.com/documentation/2.3.x/Migration23
        https://www.playframework.com/documentation/2.3.x/Highlights23
    sshpass: |-
      We won't add sshpass because it makes it too easy for novice SSH users to
      ruin SSH's security.
    tex: |-
      Installing TeX from source is weird and gross, requires a lot of patches,
      and only builds 32-bit (and thus can't use Homebrew deps on Snow Leopard.)

      We recommend using a MacTeX distribution: https://www.tug.org/mactex/
    xcode_app_store: Xcode can be installed from the App Store.
    xcode_download: Xcode can be installed from https://developer.apple.com/downloads/
  brew:
    bad_sudo: Cowardly refusing to `sudo brew %{cmd}`
    bad_sudo_2: |-
      You can use brew with sudo, but only if the brew executable is owned by root.
      However, this is both not recommended and completely unsupported so do so at
      your own risk.
    bad_xcode_path: |-
      Your xcode-select path is currently set to '/'.
      This causes the `xcrun` tool to hang, and can render Homebrew unusable.
      If you are using Xcode, you should:
        sudo xcode-select -switch /Applications/Xcode.app
      Otherwise, you should:
        sudo rm -rf /usr/share/xcode-select
    formula_unspecified: This command requires a formula argument
    homebrew_version: Homebrew %{version}
    invalid_usage: Invalid usage
    keg_unspecified: This command requires a keg argument
    no_working_dir: The current working directory doesn't exist, cannot proceed.
    please_report_bug: 'Please report this bug:'
    refuse_root_or_usr: 'Cowardly refusing to continue at this prefix: %{path}'
    snow_leopard_required: |
      Homebrew requires Snow Leopard or higher. For Tiger and Leopard support, see:
      https://github.com/mistydemeo/tigerbrew
    unknown_command: 'Unknown command: %{cmd}'
  build:
    git: |
      This directory is now a git repo. Make your changes and then use:
        git diff | pbcopy
      to copy the diff to the clipboard.
    interactive:
      entering: Entering interactive mode
      install_to: |
        Type `exit' to return and finalise the installation
        Install to this prefix: %{prefix}
  caveats:
    app: |
      .app bundles were installed.
      Run `brew linkapps %{name}` to symlink these to /Applications.
    bash_completion: |
      Bash completion has been installed to:
        %{path}
    keg_only_1: This formula is keg-only, which means it was not symlinked into %{path}.
    keg_only_2: |
      Generally there are no consequences of this for you. If you build your
      own software and it requires this formula, you'll need to add to your
      build variables:
    keg_only_cppflags: "    CPPFLAGS: -I%{path}"
    keg_only_ldflags: "    LDFLAGS:  -L%{path}"
    plist_load: 'To load %{name}:'
    plist_login: 'To have launchd start %{name} at login:'
    plist_manual: 'Or, if you don''t want/need launchctl, you can just run:'
    plist_startup: 'To have launchd start %{name} at startup:'
    plist_then_load: 'Then to load %{name} now:'
    plist_tmux_warning: 'WARNING: launchctl will fail when run under tmux.'
    plist_upgrade: 'To reload %{name} after an upgrade:'
    python_find_keg_bindings: |-
      If you need Python to find bindings for this keg-only formula, run:
        %{cmd}
    python_modules_installed: |-
      Python modules have been installed and Homebrew's site-packages is not
      in your Python sys.path, so you will not be able to import the modules
      this formula installed. If you plan to develop with these modules,
      please run:
    python_pth_files_installed: |-
      This formula installed .pth files to Homebrew's site-packages and your
      Python isn't configured to process them, so you will not be able to
      import the modules this formula installed. If you plan to develop
      with these modules, please run:
    zsh_completion: |-
      zsh completion has been installed to:
        %{path}
  cleaner:
    fixing_permissions: Fixing %{path} permissions from %{old_perms} to %{new_perms}
    rmdir_empty: 'rmdir: %{path} (empty)'
  cmd:
    audit:
      add_test_do: A `test do` test block should be added
      alias_should_be: Dependency '%{alias_name}' is an alias; use the canonical name '%{canonical_name}'.
      ambiguous_conflict: Ambiguous conflicting formula %{name}.
      ambiguous_dependency: Ambiguous dependency %{name}.
      audit_problems: audit problems
      audit_problems_formula: "%{name}:"
      audit_problems_list_item: " * %{item}"
      cant_find_conflicting: Can't find conflicting formula %{name}.
      cant_find_dependency: Can't find dependency %{name}.
      caveats_no_setuid: Don't recommend setuid in the caveats, suggest sudo instead.
      checksum_empty: "%{checksum_type} is empty"
      checksum_invalid_chars: "%{checksum_type} contains invalid characters"
      checksum_should_be_lowercase: "%{checksum_type} should be lowercase"
      checksum_should_be_n_chars: "%{checksum_type} should be %{count} characters"
      class_inheritance_space: 'Use a space in class inheritance: class Foo < %{superclass}'
      comment_cmake_found: Commented cmake call found
      comment_remove_default: Please remove default template comments
      commented_out_dep: Commented-out dep %{dep}
      conflict_with_aliases: Formula name conflicts with existing aliases.
      conflict_with_formulae: Formula name conflicts with existing core formula.
      conflicts_with_formulae_list: Formula name conflicts with %{list}
      data_without_end: "'DATA' was found, but no '__END__'"
      debian_patch_use_https: |-
        Patches from Debian should be https://, not http:
        %{url}
      define_method_in_class_body: Define method %{method} in the class body, not at the top-level
      dependency_has_no_option: Dependency %{dependency} does not define option %{option}
      depends_on_takes_classes: "`depends_on` can take requirement classes instead of instances"
      deprecated_symbol: ':%{name} is deprecated. Usage should be "%{name}"'
      desc_too_long: |
        Description is too long. "name: desc" should be less than 80 characters.
        Length is calculated as %{full_name} + desc. (currently %{length})
      devel_older_than_stable: devel version %{devel} is older than stable version %{stable}
      devel_only: Devel-only (no stable download)
      dont_need_to_interpolate: Don't need to interpolate "%{var}" with %{method}
      dont_negate_build_with: 'Don''t negate ''build.with?'': use ''build.without?'''
      dont_negate_build_without: 'Don''t negate ''build.without?'': use ''build.with?'''
      dont_use_dependency: |
        Don't use %{name} as a dependency. We allow non-Homebrew %{name} installations.
      dont_use_dependency_git: Don't use git as a dependency
      end_without_data: "'__END__' was found, but 'DATA' is not used"
      fileutils_class_dont_need: Don't need 'FileUtils.' before %{method}.
      formula_factory: '"Formula.factory(name)" is deprecated in favour of "Formula[name]"'
      formula_subclass_deprecated: "%{subclass} is deprecated, use Formula instead"
      formulae:
        one: "%{count} formula"
        other: "%{count} formulae"
      git_specify_revision_with_tag: Git should specify :revision when a :tag is specified.
      github_patch_macports: |-
        MacPorts patches should specify a revision instead of trunk:
        %{url}
      github_patch_needs_rev: |-
        GitHub/Gist patches should specify a revision:
        %{url}
      head_only: Head-only (no stable download)
      homepage_freedesktop_https_project: "%{url} should be styled `https://wiki.freedesktop.org/project_name`"
      homepage_freedesktop_https_software_project: "%{url} should be styled `https://wiki.freedesktop.org/www/Software/project_name`"
      homepage_gnu_ftpmirror: Please use "http://ftpmirror.gnu.org" instead of %{url}.
      homepage_googlecode_end_slash: "%{url} should end with a slash"
      homepage_please_use_https: Please use https:// for %{url}
      homepage_should_be_http: The homepage should start with http or https (URL is %{url}).
      inreplace_block_var: '"inreplace <filenames> do |s|" is preferred over "|%{block_var}|".'
      installation_empty: |
        The installation seems to be empty. Please ensure the prefix
        is set correctly and expected files are installed.
        The prefix configure/make argument may be case-sensitive.
      is_now_unnecessary: "`%{require_formula}` is now unnecessary"
      list_join: ", "
      macports_patch_use_https: |-
        Patches from MacPorts Trac should be https://, not http:
        %{url}
      md5_checksums_deprecated: MD5 checksums are deprecated, please use SHA256
      migrate_deprecated_option: Options should begin with with/without. Migrate '--%{option}' with `deprecated_option`.
      missing_version: missing version
      name_problem: "%{name}: %{problem}"
      needs_ending_newline: File should end with a newline
      no_dashes: Reference '%{option}' without dashes
      no_hardcoding_compiler: Use "%{env}" instead of hard-coding "%{compiler}"
      path_should_be: '"%{bad_path}" should be "%{good_path}"'
      permissions_644: 'Incorrect file permissions: chmod 644 %{path}'
      problems_in:
        one: "%{count} problem in %{n_formulae}"
        other: "%{count} problems in %{n_formulae}"
      quoted_dep: "'%{dep}'"
      redundant_cvs_module: Redundant CVS module appended to URL
      redundant_module_value: Redundant :module value in URL
      replace_with_optional_dep: Replace %{line} with "depends_on %{dep} => :optional"
      replace_with_recommended_dep: Replace %{line} with "depends_on %{dep} => :recommended"
      resource_problem: "%{name} resource %{resource}: %{problem}"
      scheme_deprecated: Use of the %{url_scheme} scheme is deprecated, pass `:using => :%{symbol}` instead
      scons_args: use "scons *args" instead of "system 'scons', *args"
      separate_make_calls: Use separate make calls
      sha1_checksums_deprecated: SHA1 checksums are deprecated, please use SHA256
      should_be_build_or_run_dependency: |
        %{name} dependency should be
          depends_on "%{name}" => :build
        Or if it is indeed a runtime denpendency
          depends_on "%{name}" => :run
      should_have_desc: Formula should have a desc (Description).
      skip_clean_all_deprecated: |
        `skip_clean :all` is deprecated; brew no longer strips symbols
                Pass explicit paths to prevent Homebrew from removing empty folders.
      specify_cvs_module: Specify CVS module as `:module => "%{module}"` instead of appending it to the URL
      ssl3_deprecated: The SSL3 download strategy is deprecated, please choose a different URL
      stable_and_devel_identical: stable and devel versions are identical
      strategy_deprecated: "%{strategy} is deprecated, please choose a different URL"
      string_concat_in_interpolation: |
        Try not to concatenate paths in string interpolation:
           %{interpolation}
      trailing_whitespace: "%{line_num}: Trailing whitespace was found"
      unnecessary: "%{dir_with_path} is unnecessary; just use %{path}"
      url_download_gnome_org: "%{url} should be `https://download.gnome.org/%{url_path}`"
      url_duped_mirror: 'URL should not be duplicated as a mirror: %{url}'
      url_github_no_zips: Use GitHub tarballs rather than zipballs (url is %{url}).
      url_github_tarballs: Use /archive/ URLs for GitHub tarballs (url is %{url}).
      url_metacpan: "%{url} should be `https://cpan.metacpan.org/%{url_path}`"
      url_sourceforge_geoloc: Use https://downloads.sourceforge.net to get geolocation (url is %{url}).
      url_sourceforge_no_download: Don't use /download in SourceForge urls (url is %{url}).
      url_sourceforge_no_mirror: Don't use %{url_query_part}use_mirror in SourceForge urls (url is %{url}).
      url_sourceforge_no_prdown: |
        Don't use prdownloads in SourceForge urls (url is %{url}).
            See: http://librelist.com/browser/homebrew/2011/1/12/prdownloads-is-bad/
      url_sourceforge_no_specific: Don't use specific dl mirrors in SourceForge urls (url is %{url}).
      url_using_redundant: Redundant :using value in URL
      use_build_head: Use 'build.head?' instead of inspecting 'version'
      use_build_instead_of_argv: Use build instead of ARGV to check options
      use_build_with: 'Don''t duplicate ''with'': Use `build.with? "%{option}"` to check for "--with-%{option}"'
      use_build_with_not_include: Use build.with%{out}? "%{option}" instead of build.include? 'with%{out}-%{option}'
      use_build_without: 'Don''t duplicate ''without'': Use `build.without? "%{option}"` to check for "--without-%{option}"'
      use_depends_on_fortran: Use `depends_on :fortran` instead of `ENV.fortran`
      use_depends_on_hg: Use `depends_on :hg` instead of `depends_on 'mercurial'`
      use_depends_on_java_to_set_java_home: Use `depends_on :java` to set JAVA_HOME
      use_depends_on_x11: Use "depends_on :x11" instead of "ENV.x11"
      use_env_instead_of: Use ENV instead of invoking '%{bad}' to modify the environment
      use_fortran_not_gfortran: Use `depends_on :fortran` instead of `depends_on 'gfortran'`
      use_if_argv_build: Use "if build.%{build_test}?" instead
      use_if_build_with: Use if build.with?%{option} instead of unless build.without?%{option}
      use_if_build_without: Use if build.without?%{option} instead of unless build.with?%{option}
      use_macos_version: Use MacOS.version instead of MACOS_VERSION
      use_mpi_dependency: |
        There are multiple conflicting ways to install MPI. Use an MPIRequirement:
          depends_on :mpi => [<lang list>]
        Where <lang list> is a comma delimited list that can include:
          :cc, :cxx, :f77, :f90
      use_new_style_opt_defs: Use new-style option definitions
      use_new_style_test_defs: Use new-style test definitions (test do)
      use_patch_dsl: Use the patch DSL instead of defining a 'patches' method
      use_ruby_method_instead_of_system: Use the `%{method}` Ruby method instead of `system %{shell_cmd}`
      use_spaces_not_tabs: Use spaces instead of tabs for indentation
      use_system_alternative: 'Use `system %{good_system}` instead of `system %{bad_system}` '
      version_empty_string: version is set to an empty string
      version_is_devel: "%{version} is a development release"
      version_no_digit: "%{name}: version (%{version}) is set to a string without a digit"
      version_no_leading_v: version %{version} should not have a leading 'v'
      version_redundant: version %{version} is redundant with version scanned from URL
      version_symbol_deprecated: '"%{symbol}" is deprecated, use a comparison to MacOS.version instead'
      version_trailing_underscore_digit: version %{version} should not end with an underline and a number
      xcodebuild_args: use "xcodebuild *args" instead of "system 'xcodebuild', *args"
      xcodebuild_symroot: xcodebuild should be passed an explicit "SYMROOT"
    bottle:
      absolute_symlink_1: 'Absolute symlink starting with %{string}:'
      absolute_symlink_2: "  %{keg} -> %{resolved_path}"
      bottle_block_addition_failed: Bottle block addition failed!
      bottle_block_update_failed: Bottle block update failed!
      bottling: Bottling %{filename}...
      detecting_relocatability: Detecting if %{filename} is relocatable...
      determining_bottle_revision: Determining %{name} bottle revision...
      formula_has_no_stable_version: 'Formula has no stable version: %{name}'
      formula_not_installed_or_up_to_date: 'Formula not installed or up-to-date: %{name}'
      formula_not_installed_w_build_bottle: 'Formula not installed with ''--build-bottle'': %{name}'
      highlighted_filename: "%{Tty_red}%{filename}%{Tty_reset}"
      links_to: " %{Tty_gray}-->%{Tty_reset} links to %{lib}"
      string_match: " %{Tty_gray}-->%{Tty_reset} match '%{match}' at offset %{Tty_em}0x%{offset}%{Tty_reset}"
      string_still_exists: 'String ''%{string}'' still exists in these files:'
    cleanup:
      only_one_version: 'Skipping %{name}: most recent version %{version} not installed'
      removing_path: 'Removing: %{path}... (%{abv})'
      removing_path_dry_run: 'Would remove: %{path} (%{abv})'
      skipping_keg_only: 'Skipping (old) keg-only: %{name}'
      skipping_linked_keg: Skipping (old) %{name} due to it being linked
    commands:
      built_in_commands: Built-in commands
      external_commands: External commands
    config:
      comma_join: ", "
      item_clang: 'Clang: %{value}'
      item_clt: 'CLT: %{value}'
      item_gcc_40: 'GCC-4.0: %{value}'
      item_gcc_42: 'GCC-4.2: %{value}'
      item_hardware: 'CPU: %{cores_as_words}-core %{cpu_bits}-bit %{cpu_family}'
      item_head: 'HEAD: %{value}'
      item_homebrew_bottle_domain: 'HOMEBREW_BOTTLE_DOMAIN: %{value}'
      item_homebrew_cellar: 'HOMEBREW_CELLAR: %{value}'
      item_homebrew_prefix: 'HOMEBREW_PREFIX: %{value}'
      item_homebrew_version: 'HOMEBREW_VERSION: %{value}'
      item_java: 'Java: %{value}'
      item_last_commit: 'Last commit: %{value}'
      item_llvm_gcc: 'LLVM-GCC: build %{llvm}'
      item_macports_fink: 'MacPorts/Fink: %{value}'
      item_origin: 'ORIGIN: %{value}'
      item_os_x: 'OS X: %{version}-%{kernel}'
      item_perl: 'Perl: %{value}'
      item_python: 'Python: %{value}'
      item_ruby: 'Ruby: %{value}'
      item_system_ruby: 'System Ruby: %{value}'
      item_x11: 'X11: %{value}'
      item_xcode: 'Xcode: %{value}'
      never: never
      none: "(none)"
      not_applicable: N/A
      pair_with_arrow: "%{from} => %{to}"
    create:
      error_already_aliased: |
        The formula %{real_name} is already aliased to %{alias}
        Please check that you are not creating a duplicate.
        To force creation use --force.
      error_blacklisted: |
        %{name} is blacklisted for creation.
        %{msg}
        If you really want to create this formula use --force.
      error_path_exists: "%{path} already exists"
      prompt_formula_name: 'Formula name [%{stem}]: '
      suggest_brew_audit_strict: Please `brew audit --strict %{name}` before submitting, thanks.
      warn_cant_determine_version_1: Version cannot be determined from URL.
      warn_cant_determine_version_2: You'll need to add an explicit 'version' to the formula.
    doctor:
      autoconf_xcode: |
        An "autoconf" in your path blocks the Xcode-provided version at:
          %{path}

        This custom autoconf may cause some Homebrew formulae to fail to compile.
      bad_install_name_tool: |
        You have an outdated version of /usr/bin/install_name_tool installed.
        This will cause binary package installations to fail.
        This can happen if you install osx-gcc-installer or RailsInstaller.
        To restore it, you must reinstall OS X or restore the binary from
        the OS packages.
      broken_symlinks: |
        Broken symlinks were found. Remove them with `brew prune`:
          %{broken_symlinks}
      cellar_and_temp_not_same_vol: |
        Your Cellar and TEMP directories are on different volumes.
        OS X won't move relative symlinks across volumes unless the target file already
        exists. Brews known to be affected by this are Git and Narwhal.

        You should set the "HOMEBREW_TEMP" environmental variable to a suitable
        directory on the same volume as your Cellar.
      dyld_vars_are_set: |
        Setting DYLD_* vars can break dynamic linking.
        Set variables:
      dyld_vars_are_set_2: |2
            %{name}: %{value}
      dyld_vars_have_go_conflict: |2

        Setting DYLD_INSERT_LIBRARIES can cause Go builds to fail.
        Having this set is common if you use this software:
          http://asepsis.binaryage.com/
      enthought_python_in_path: |
        Enthought Python was found in your PATH.
        This can cause build problems, as this software installs its own
        copies of iconv and libxml2 into directories that are picked up by
        other build systems.
      external_commands_conflict: You have external commands with conflicting names.
      filesystem_case_sensitive: |
        The filesystem on %{paths} appears to be case-sensitive.
        The default OS X filesystem is case-insensitive. Please report any apparent problems.
      found_command_here: 'Found command `%{cmd_name}` in following places:'
      git_autocrlf_settings: |
        Suspicious Git newline settings found.

        The detected Git newline settings will cause checkout problems:
          core.autocrlf = %{value}

        If you are not routinely dealing with Windows-based projects,
        consider removing these by running:
        `git config --global core.autocrlf input`
      git_not_found: |
        Git could not be found in your PATH.
        Homebrew uses Git for several internal functions, and some formulae use Git
        checkouts instead of stable tarballs. You may want to install Git:
          brew install git
      git_outdated: |
        An outdated version of Git was detected in your PATH.
        Git 1.7.10 or newer is required to perform checkouts over HTTPS from GitHub.
        Please upgrade: brew upgrade git
      git_remote_no_origin: |
        Missing git origin remote.

        Without a correctly configured origin, Homebrew won't update
        properly. You can solve this by adding the Homebrew remote:
          cd %{path}
          git remote add origin https://github.com/Homebrew/homebrew.git
      git_remote_origin_suspect: |
        Suspicious git origin remote found.

        With a non-standard origin, Homebrew won't pull updates from
        the main repository. The current git origin is:
          %{origin}

        Unless you have compelling reasons, consider setting the
        origin remote to point at the main repository, located at:
          https://github.com/Homebrew/homebrew.git
      homebrew_is_outdated: |
        Your Homebrew is outdated.
        You haven't updated for at least 24 hours. This is a long time in brewland!
        To update Homebrew, run `brew update`.
      homebrew_not_in_usr_local: |
        Your Homebrew is not installed to /usr/local
        You can install Homebrew anywhere you want, but some brews may only build
        correctly if you install in /usr/local. Sorry!
      install_clt: |
        No developer tools installed.
        Install the Command Line Tools:
          xcode-select --install
      keg_only_formula_linked: |
        Some keg-only formula are linked into the Cellar.
        Linking a keg-only formula, such as gettext, into the cellar with
        `brew link <formula>` will cause other formulae to detect them during
        the `./configure` step. This may cause problems when compiling those
        other formulae.

        Binaries provided by keg-only formulae may override system binaries
        with other strange results.

        You may wish to `brew unlink` these brews:
      libiconv_formula_linked: |
        A libiconv formula is installed and linked
        This will break stuff. For serious. Unlink it.
      libiconv_not_in_usr: |
        libiconv files detected at a system prefix other than /usr
        Homebrew doesn't provide a libiconv formula, and expects to link against
        the system version in /usr. libiconv in other prefixes can cause
        compile or link failure, especially if compiled with improper
        architectures. OS X itself never installs anything to /usr/local so
        it was either installed by a user or some other third party software.

        tl;dr: delete these files:
      macgpg2: |
        You may have installed MacGPG2 via the package installer.
        Several other checks in this script will turn up problems, such as stray
        dylibs in /usr/local and permissions issues with share and man in /usr/local/.
      macports_or_fink: |
        You have MacPorts or Fink installed:
          %{macports_or_fink}

        This can cause trouble. You don't have to uninstall them, but you may want to
        temporarily move them out of the way, e.g.

          sudo mv /opt/local ~/macports
      missing_deps: |
        Some installed formula are missing dependencies.
        You should `brew install` the missing dependencies:

            brew install %{deps}

        Run `brew missing` for more details.
      no_check_by_that_name: 'No check available by the name: %{method}'
      no_pth_support: |
        Your default Python does not recognize the Homebrew site-packages
        directory as a special site-packages directory, which means that .pth
        files will not be followed. This means you will not be able to import
        some modules after installing them with Homebrew, like wxpython. To fix
        this for the current user, you can run:

          mkdir -p %{user_site_packages}
          echo 'import site; site.addsitedir("%{homebrew_site_packages}")' >> %{user_site_packages}/homebrew.pth
      non_homebrew_gettext: |
        gettext files detected at a system prefix
        These files can cause compilation and link failures, especially if they
        are compiled with improper architectures. Consider removing these files:
      non_homebrew_pkgconfig: |
        You have a non-Homebrew 'pkg-config' in your PATH:
          %{path}

        `./configure` may have problems finding brew-installed packages using
        this other pkg-config.
      non_homebrew_pkgconfig_mono: |
        You have a non-Homebrew 'pkg-config' in your PATH:
          /usr/bin/pkg-config => %{path}

        This was most likely created by the Mono installer. `./configure` may
        have problems finding brew-installed packages using this other pkg-config.

        Mono no longer installs this file as of 3.0.4. You should
        `sudo rm /usr/bin/pkg-config` and upgrade to the latest version of Mono.
      non_prefixed_coreutils: |
        Putting non-prefixed coreutils in your path can cause gmp builds to fail.
      non_prefixed_findutils: |
        Putting non-prefixed findutils in your path can cause python builds to fail.
      note_on_warnings: |
        Please note that these warnings are just used to help the Homebrew maintainers
        with debugging if you file an issue. If everything you use Homebrew for is
        working fine: please don't worry and just ignore them. Thanks!
      old_env_var_homebrew_keep_info: |
        `HOMEBREW_KEEP_INFO` is no longer used
        info files are no longer deleted by default; you may
        remove this environment variable.
      old_share_python_in_path: |
        %{path_prefix}/share/python%{python_suffix} is not needed in PATH.
      old_share_python_in_path_more: |
        Formerly homebrew put Python scripts you installed via `pip` or `pip3`
        (or `easy_install`) into that directory above but now it can be removed
        from your PATH variable.
        Python scripts will now install into %{path_prefix}/bin.
        You can delete anything, except 'Extras', from the %{path_prefix}/share/python
        (and %{path_prefix}/share/python3) dir and install affected Python packages
        anew with `pip install --upgrade`.
      osx_gcc_installer: |
        You seem to have osx-gcc-installer installed.
        Homebrew doesn't support osx-gcc-installer. It causes many builds to fail and
        is an unlicensed distribution of really old Xcode files.
      osx_gcc_installer_advice: Please install Xcode %{latest_xcode}.
      osx_gcc_installer_advice_lion: |
        Please install the CLT or Xcode %{latest_xcode}.
      osx_gcc_installer_advice_mavericks: |
        Please run `xcode-select --install` to install the CLT.
      other_framework_detected: |
        %{framework} detected
        This can be picked up by CMake's build system and likely cause the build to
        fail. You may need to move this file out of the way to compile CMake.
      pydistutils_cfg_in_home: |
        A .pydistutils.cfg file was found in $HOME, which may cause Python
        builds to fail. See:
          https://bugs.python.org/issue6138
          https://bugs.python.org/issue4655
      python_bad_symlink: |
        python is symlinked to %{python_bin}
        This will confuse build scripts and in general lead to subtle breakage.
      python_in_library_frameworks: |
        Python is installed at /Library/Frameworks/Python.framework

        Homebrew only supports building against the System-provided Python or a
        brewed Python. In particular, Pythons installed to /Library can interfere
        with other software installs.
      stray_config_scripts: |
        "config" scripts exist outside your system or Homebrew directories.
        `./configure` scripts often look for *-config scripts to determine if
        software packages are installed, and what additional flags to use when
        compiling and linking.

        Having additional scripts in your path can confuse software installed via
        Homebrew if the config script overrides a system or Homebrew provided
        script of the same name. We found the following "config" scripts:
      stray_dev_dir: |
        You have leftover files from an older version of Xcode.
        You should delete them using:
          %{uninstall_cmd}
      stray_dylibs: |
        Unbrewed dylibs were found in /usr/local/lib.
        If you didn't put them there on purpose they could cause problems when
        building Homebrew formulae, and may need to be deleted.

        Unexpected dylibs:
      stray_includes: |
        Unbrewed header files were found in /usr/local/include.
        If you didn't put them there on purpose they could cause problems when
        building Homebrew formulae, and may need to be deleted.

        Unexpected header files:
      stray_las: |
        Unbrewed .la files were found in /usr/local/lib.
        If you didn't put them there on purpose they could cause problems when
        building Homebrew formulae, and may need to be deleted.

        Unexpected .la files:
      stray_pcs: |
        Unbrewed .pc files were found in /usr/local/lib/pkgconfig.
        If you didn't put them there on purpose they could cause problems when
        building Homebrew formulae, and may need to be deleted.

        Unexpected .pc files:
      stray_static_libs: |
        Unbrewed static libraries were found in /usr/local/lib.
        If you didn't put them there on purpose they could cause problems when
        building Homebrew formulae, and may need to be deleted.

        Unexpected static libraries:
      symlinked_cellar_found: |
        Symlinked Cellars can cause problems.
        Your Homebrew Cellar is a symlink: %{symlink}
                        which resolves to: %{real_path}

        The recommended Homebrew installations are either:
        (A) Have Cellar be a real directory inside of your HOMEBREW_PREFIX
        (B) Symlink "bin/brew" into your prefix, but don't symlink "Cellar".

        Older installations of Homebrew may have created a symlinked Cellar, but this can
        cause problems when two formula install to locations that are mapped on top of each
        other during the linking step.
      tmpdir_doesnt_exist: TMPDIR %{path} doesn't exist.
      tmpdir_needs_sticky_bit: |-
        %{path} is world-writable but does not have the sticky bit set.
        Please run "Repair Disk Permissions" in Disk Utility.
      trailing_slashes: |
        Some directories in your path end in a slash.
        Directories in your path should not end in a slash. This can break other
        doctor checks. The following directories should be edited:
      uncommitted_mods: |
        You have uncommitted modifications to Homebrew
        If this a surprise to you, then you should stash these modifications.
        Stashing returns Homebrew to a pristine state but can be undone
        should you later need to do so for some reason.
            cd %{path} && git stash && git clean -d -f
      unlinked_kegs_in_cellar: |
        You have unlinked kegs in your Cellar
        Leaving kegs unlinked can lead to build-trouble and cause brews that depend on
        those kegs to fail to run properly once built. Run `brew link` on these:

                %{kegs}
      unsupported_ruby: |
        Ruby version %{unsupported_ruby} is unsupported on %{macos_version}. Homebrew
        is developed and tested on Ruby %{supported_ruby}, and may not work correctly
        on other Rubies. Patches are accepted as long as they don't cause breakage
        on supported Rubies.
      unwritable: |
        %{path} isn't writable.
        You should `chown` %{path}
      unwritable_access_logs: |
        %{path} isn't writable.
        Homebrew writes debugging logs to this location.
        You should probably `chown` %{path}
      unwritable_cache: |
        %{path} isn't writable.
        This can happen if you run `brew install` or `brew fetch` as another user.
        Homebrew caches downloaded files to this location.
        You should probably `chown` %{path}
      unwritable_directories: |
        Some directories in %{path} aren't writable.
        This can happen if you "sudo make install" software that isn't managed
        by Homebrew. If a brew tries to add locale information to one of these
        directories, then the install will fail during the link step.
        You should probably `chown` them:
      unwritable_directory: |
        %{path} isn't writable.

        This can happen if you "sudo make install" software that isn't managed by
        by Homebrew. If a formula tries to write a file to this directory, the
        install will fail during the link step.

        You should probably `chown` %{path}
      unwritable_site_packages: |
        %{path} isn't writable.
        This can happen if you "sudo pip install" software that isn't managed
        by Homebrew. If you install a formula with Python modules, the install
        will fail during the link step.

        You should probably `chown` %{path}
      unwritable_usr_local: |
        The /usr/local directory is not writable.
        Even if this directory was writable when you installed Homebrew, other
        software may change permissions on this directory. Some versions of the
        "InstantOn" component of Airfoil are known to do this.

        You should probably change the ownership and permissions of /usr/local
        back to your user account.
      user_curlrc_exists: |
        You have a curlrc file
        If you have trouble downloading packages with Homebrew, then maybe this
        is the problem? If the following command doesn't work, then try removing
        your curlrc:
          curl http://github.com
      user_path_has_no_homebrew_bin: |
        Homebrew's bin was not found in your PATH.
        Consider setting the PATH for example like so
            echo 'export PATH="%{path}:$PATH"' >> %{shell_profile}
      user_path_has_no_homebrew_sbin: |
        Homebrew's sbin was not found in your PATH but you have installed
        formulae that put executables in %{path}.
        Consider setting the PATH for example like so
            echo 'export PATH="%{path}:$PATH"' >> %{shell_profile}
      user_path_out_of_order: |
        /usr/bin occurs before %{path}
        This means that system-provided programs will be used instead of those
        provided by Homebrew. The following tools exist at both paths:

            %{conflicts}

        Consider setting your PATH so that %{path}
        occurs before /usr/bin. Here is a one-liner:
            echo 'export PATH="%{path}:$PATH"' >> %{shell_profile}
      xcode_clt_install_from_web: |
        No developer tools installed.
        You should install the Command Line Tools.
        The standalone package can be obtained from
          https://developer.apple.com/downloads
        or it can be installed via Xcode's preferences.
      xcode_clt_update_from_app_store: |
        A newer Command Line Tools release is available.
        Update them from Software Update in the App Store.
      xcode_clt_update_from_web: |
        A newer Command Line Tools release is available.
        The standalone package can be obtained from
          https://developer.apple.com/downloads
        or it can be installed via Xcode's preferences.
      xcode_license_not_agreed: |
        You have not agreed to the Xcode license.
        Builds will fail! Agree to the license by opening Xcode.app or running:
            sudo xcodebuild -license
      xcode_not_installed: |
        Xcode is not installed. Most formulae need Xcode to build.
        It can be installed from
          https://developer.apple.com/downloads
      xcode_outdated_app_store: |
        Your Xcode (%{outdated_xcode}) is outdated
        Please update to Xcode %{latest_xcode}.
        Xcode can be updated from the App Store.
      xcode_outdated_download: |
        Your Xcode (%{outdated_xcode}) is outdated
        Please update to Xcode %{latest_xcode}.
        Xcode can be updated from
          https://developer.apple.com/downloads
      xcode_prefix_has_space: |
        Xcode is installed to a directory with a space in the name.
        This will cause some formulae to fail to build.
      xcode_prefix_nonexistent: |
        The directory Xcode is reportedly installed to doesn't exist:
          %{path}
        You may need to `xcode-select` the proper path if you have moved Xcode.
      xcode_select_path_invalid: |
        Your Xcode is configured with an invalid path.
        You should change it to the correct path:
          sudo xcode-select -switch %{path}
      xquartz_is_outdated: |
        Your XQuartz (%{installed_version}) is outdated
        Please install XQuartz %{latest_version}:
          https://xquartz.macosforge.org
    edit:
      changes_will_be_lost: |
        Changes will be lost!
        The first time you `brew update', all local changes will be lost, you should
        thus `brew update' before you `brew edit'!
    help: |
      Example usage:
        brew [info | home | options ] [FORMULA...]
        brew install FORMULA...
        brew uninstall FORMULA...
        brew search [foo]
        brew list [FORMULA...]
        brew update
        brew upgrade [--all | FORMULA...]
        brew pin/unpin [FORMULA...]

      Troubleshooting:
        brew doctor
        brew install -vd FORMULA
        brew [--env | config]

      Brewing:
        brew create [URL [--no-fetch]]
        brew edit [FORMULA...]
        https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/Formula-Cookbook.md

      Further help:
        man brew
        brew home
    install:
      already_installed: "%{name}-%{version} already installed"
      already_installed_not_linked: "%{name}-%{version} already installed, it's just not linked"
      cannot_create_dir: |
        Could not create %{path}
        Check you have permission to write to %{parent}
      cannot_write_dir: Cannot write to %{path}
      devel_only_formula: |
        %{name} is a devel-only formula
        Install with `brew install --devel %{name}`
      head_only_formula: |
        %{name} is a head-only formula
        Install with `brew install --HEAD %{name}`
      head_uppercase: Specify `--HEAD` in uppercase to build from trunk.
      macports_or_fink_installed_1: It appears you have MacPorts or Fink installed.
      macports_or_fink_installed_2: |
        Software installed with other package managers causes known problems for
        Homebrew. If a formula fails to build, uninstall MacPorts/Fink and try again.
      no_devel_defined: No devel block is defined for %{name}
      no_head_defined: No head is defined for %{name}
      no_stable_download: "%{name} has no stable download, please choose --devel or --HEAD"
      searching_formulae: Searching formulae...
      searching_taps: Searching taps...
      unsupported_arch: |
        Sorry, Homebrew does not support your computer's CPU architecture.
        For PPC support, see: https://github.com/mistydemeo/tigerbrew
    list:
      files: "%{path}/ (%{count} files)"
      other_files: "%{path}/ (%{count} other files)"
      symlink: "%{symlink} -> %{target}"
    options:
      install_devel_version: Install development version %{version}
      install_head_version: Install HEAD version
    pull:
      argument_required: This command requires at least one argument containing a URL or pull request number
      can_only_bump_one_changed_formula: Can only bump one changed formula
      current_branch_not_master: 'Current branch is %{branch}: do you need to pull inside master?'
      has_bottle: "%{name} has a bottle: do you need to update it with --bottle?"
      installing: Installing %{name}
      must_set_bintray_creds: You must set BINTRAY_USER and BINTRAY_KEY to add or update bottles on Bintray!
      new_bump_commit_subject: 'New bump commit subject: %{subject}'
      no_pull_request_detected: No pull request detected!
      not_github_pull_request: 'Not a GitHub pull request or commit: %{arg}'
      patch_changed: 'Patch changed:'
      patch_closes_issue_number: 'Patch closes issue #%{issue}'
      patch_failed_to_apply: 'Patch failed to apply: try to resolve it.'
      patch_failure_abort: 'Patch failed to apply: aborted.'
      publishing_on_bintray: 'Publishing on Bintray:'
      you_meant_git_pull_rebase: You meant `git pull --rebase`.
    search:
      failed_to_search_tap: 'Failed to search tap: %{user}/%{repo}. Please run `brew update`'
      if_you_meant_precisely: '"If you meant %{term} precisely:"'
      no_formula_found: No formula found for %{term}.
      suggest_regex_1: Did you mean to perform a regular expression search?
      suggest_regex_2: Surround your query with /slashes/ to search by regex.
    tap:
      invalid_name: Invalid tap name
      private_repo_tapped: |-
        It looks like you tapped a private repository. To avoid entering your
        credentials each time you update, you can use git HTTP credential
        caching or issue the following command:

          cd %{path}
          git remote set-url origin git@github.com:%{repo_user}/homebrew-%{repo}.git
      tapped_formulae_abv:
        one: Tapped %{count} formula (%{abv})
        other: Tapped %{count} formulae (%{abv})
    uninstall:
      comma: ", "
      must_remove_all: Use `brew remove --force %{name}` to remove all versions.
      remove_all: Remove them all with `brew uninstall --force %{name}`.
      still_installed:
        one: "%{name} %{versions} is still installed."
        other: "%{name} %{versions} are still installed."
      uninstalling: Uninstalling %{name}... (%{abv})
    untap:
      error_usage: Usage is `brew untap <tap-name>`
      untapped_formulae:
        one: Untapped %{count} formula
        other: Untapped %{count} formulae
      untapping: Untapping %{name}... (%{abv})
    update:
      already_up_to_date: Already up-to-date.
      deleted_formulae:
        one: Deleted Formula
        other: Deleted Formulae
      homebrew_tap_structure_1: Homebrew changed the structure of Taps like <someuser>/<sometap>. %{cont}
      homebrew_tap_structure_2: So you may need to rename %{tap_path} manually.
      homebrew_tap_structure_3: "%{tap_name} is incorrect name format. You may need to rename it like <someuser>/<sometap> manually."
      new_formulae:
        one: New Formula
        other: New Formulae
      no_formula_names: |-
        This command updates brew itself, and does not take formula names.
        Use `brew upgrade <formula>`.
      update_tap_failed: 'Failed to update tap: %{tap}'
      updated_formulae:
        one: Updated Formula
        other: Updated Formulae
      updated_homebrew: Updated Homebrew from %{initial_revision} to %{current_revision}
    upgrade:
      formula_already_installed: "%{name} already installed"
      formula_name_and_version: "%{name} %{version}"
      formula_version_already_installed: "%{name} %{version} already installed"
      list_join: ", "
      no_pkgs_to_upgrade: No packages to upgrade
      not_upgrading_pinned_pkg:
        one: 'Not upgrading %{count} pinned package:'
        other: 'Not upgrading %{count} pinned packages:'
      upgrading_formula: Upgrading %{name}
      upgrading_outdated_pkg:
        one: 'Upgrading %{count} outdated package, with result:'
        other: 'Upgrading %{count} outdated packages, with result:'
  debrew:
    choose_an_action: 'Choose an action: '
    multiple_options_match: 'Multiple options match: %{matches}'
    no_such_option: No such option
    when_you_exit_irb: When you exit this IRB session, execution will continue.
    when_you_exit_shell: When you exit this shell, you will return to the menu.
  download_strategy:
    already_downloaded: 'Already downloaded: %{path}'
    aws_creds_missing: AWS credentials missing, trying public URL instead.
    bad_s3_url: 'Bad S3 URL: %{url}'
    best_mirror: Best Mirror %{url}
    checking_out: Checking out %{ref_type} %{ref}
    cloning: Cloning %{url}
    couldnt_determine_mirror: Couldn't determine mirror, try again later.
    downloading: Downloading %{url}
    empty_archive: Empty archive
    install_aws_sdk: Install the aws-sdk gem into the gem repo used by brew.
    pouring: Pouring %{name}
    removing_invalid_repo: Removing invalid repository from cache
    trying_full_download: Trying a full download
    trying_mirror: Trying a mirror...
    unexpected_revision: |-
      %{ref} tag should be %{expected}
      but is actually %{actual}
    unknown_download_strategy: Unknown download strategy %{name} was requested.
    unknown_download_strategy_spec: Unknown download strategy specification %{name}
    updating: Updating %{path}
  exceptions:
    build_error:
      dump_heading_configuration: Configuration
      dump_heading_env: ENV
      dump_heading_formula: Formula
      dump_heading_logs: 'Logs:'
      dump_path: 'Path: %{path}'
      dump_tap: 'Tap: %{tap}'
      failed_executing: 'Failed executing: %{cmd} %{args}'
      formula_did_not_build: "%{name} %{version} did not build"
      issues_line_item: "%{title} (%{url})"
      logs_line_item: "     %{log_entry}"
      moved_to_boneyard: |-
        %{formula} was moved to homebrew-boneyard because it has unfixable issues.
        Please do not file any issues about this. Sorry!
      read_this: "%{read_this_color}READ THIS%{reset_color}: %{url_color}%{url}%{reset_color}"
      refer_to_issues: 'These open issues may also help:'
      report_tap_issue: |
        If reporting this issue please do so at (not Homebrew/homebrew):
          https://github.com/%{tap}/issues
    checksum_mismatch_error: |-
      %{hash_type} mismatch
      Expected: %{expected}
      Actual: %{actual}
      Archive: %{file}
      To retry an incomplete download, remove the file above.
    compiler_selection_error: |-
      %{name} cannot be built with any available compilers.
      To install this formula, you may need to:
        brew install gcc
    curl_download_strategy_error_local_file: 'File does not exist: %{file}'
    curl_download_strategy_error_remote_url: 'Download failed: %{url}'
    download_error: |-
      Failed to download resource %{resource}
      %{message}
    duplicate_resource_error: Resource %{resource} is defined more than once
    error_during_execution: 'Failure while executing: %{cmd} %{args}'
    formula_conflict_error: |
      %{error_intro}
      %{conflict_list}

      Please `brew unlink %{conflicts}` before continuing.

      Unlinking removes a formula's symlinks from %{homebrew_prefix}. You can
      link the formula again after the install finishes. You can --force this
      install, but the build may fail or cause obscure side-effects in the
      resulting software.
    formula_conflict_error_intro:
      one: Cannot install %{name} because a conflicting formula is installed.
      other: Cannot install %{name} because conflicting formulae are installed.
    formula_conflict_error_line_item: "  %{name}"
    formula_conflict_error_line_item_w_reason: "  %{name}: because %{reason}"
    formula_installation_already_attempted_error: 'Formula installation already attempted: %{name}'
    formula_unavailable_error: No available formula for %{name}
    formula_unavailable_error_w_dependent: No available formula for %{name} (dependency of %{dependent})
    formula_validation_error: 'invalid attribute: %{attr} (%{value})'
    multiple_versions_installed_error: "%{name} has multiple installed versions"
    no_such_keg_error: 'No such keg: %{cellar}/%{name}'
    operation_in_progress_error: |
      Operation already in progress for %{name}
      Another active Homebrew process is already using %{name}.
      Please wait for it to finish or terminate it to continue.
    resource_missing_error: "%{formula} does not define resource %{resource}"
    tap_formula_unavailable_error: |
      No available formula for %{name}
      Please tap it and then try again: brew tap %{user}/%{repo}
    tap_formula_unavailable_error_w_dependent: |-
      No available formula for %{name} (dependency of %{dependent})
      Please tap it and then try again: brew tap %{user}/%{repo}
    unsatisfied_requirements:
      one: An unsatisfied requirement failed this build.
      other: Unsatisfied requirements failed this build.
  extend:
    argv:
      multiple_kegs: |-
        Multiple kegs installed to %{rack}
        However we don't know which one you refer to.
        Please delete (with rm -rf!) all but one and then try again.
    env:
      alternative_fc: Building with an alternative Fortran compiler
      can_change_fc: This may be changed by setting the FC environment variable.
      cxx11_not_supported: 'The selected compiler doesn''t support C++11: %{name}'
      gcc_formula_not_found: |-
        Homebrew GCC requested, but formula %{name} not found!
        You may need to: brew tap homebrew/versions
      gcc_not_installed: |
        The requested Homebrew GCC was not installed. You must:
          brew install %{name}
      gfortran_homebrew: Using Homebrew-provided fortran compiler.
      gfortran_other: Using a Fortran compiler found at %{path}.
      invalid_value: 'Invalid value for %{source}: %{other}'
      no_fc_flags: |-
        No Fortran optimization information was provided.  You may want to consider
        setting FCFLAGS and FFLAGS or pass the `--default-fortran-flags` option to
        `brew install` if your compiler is compatible with GCC.

        If you like the default optimization level of your compiler, ignore this
        warning.
      unsupported: This is unsupported.
    pathname:
      abv:
        one: "%{count} file, %{size}"
        other: "%{count} files, %{size}"
      does_not_exist: "%{path} does not exist"
      exec_scripts_empty_targets: tried to write exec scripts to %{path} for an empty list of targets
      same_file: "%{path} is the same file as %{other}"
      tried_to_install_empty_array_to: tried to install empty array to %{path}
      tried_to_install_empty_hash_to: tried to install empty hash to %{path}
      will_not_overwrite: Will not overwrite %{path}
  formula:
    at_least_url_required: formulae require at least a URL
    cannot_override_brew_method: You cannot override Formula#brew in class %{name}
    failed_to_import: 'Failed to import: %{name}'
    python_method_deprecated: Formula#python is deprecated and will go away shortly.
    tap_action_catchall: Performing action "%{verb}" on %{name} from %{tap}
    tap_action_fetching: Fetching %{name} from %{tap}
    tap_action_installing: Installing %{name} from %{tap}
  formula_cellar_checks:
    easy_install_pth_files_found: |-
      easy-install.pth files were found
      These .pth files are likely to cause link conflicts. Please invoke
      setup.py using Language::Python.setup_install_args.
      The offending files are
    generics_found_in_bin: |-
      Generic binaries were installed to "%{path}"
      Binaries with generic names are likely to conflict with other software,
      and suggest that this software should be installed to "libexec" and then
      symlinked as needed.

      The offending files are:
    jars_found_in_lib: |-
      JARs were installed to "%{path}"
      Installing JARs to "lib" can cause conflicts between packages.
      For Java software, it is typically better for the formula to
      install to "libexec" and then symlink or wrap binaries into "bin".
      See "activemq", "jruby", etc. for examples.
      The offending files are:
    non_execs_found_in_bin: |-
      Non-executables were installed to "%{path}"
      The offending files are:
    non_libraries_found_in_lib: |-
      Non-libraries were installed to "%{path}"
      Installing non-libraries to "lib" is discouraged.
      The offending files are:
    obj_linked_against_system_openssl: |-
      object files were linked against system openssl
      These object files were linked against the deprecated system OpenSSL.
      Adding `depends_on "openssl"` to the formula may help.
    prefix_bin_not_in_path: |-
      %{prefix_bin} is not in your PATH
      You can amend this by altering your %{shell_profile} file
    python_explicit_frameworks: |-
      python modules have explicit framework links
      These python extension modules were linked directly to a Python
      framework binary. They should be linked with -undefined dynamic_lookup
      instead of -lpython or -framework Python.
    shadowed_headers_found_in_include: |-
      Header files that shadow system header files were installed to "%{path}"
      The offending files are:
    top_level_info_dir: |-
      A top-level "info" directory was found
      Homebrew suggests that info pages live under share.
      This can often be fixed by passing "--infodir=#{info}" to configure.
    top_level_man_dir: |-
      A top-level "man" directory was found
      Homebrew requires that man pages live under share.
      This can often be fixed by passing "--mandir=#{man}" to configure.
  formula_installer:
    all_deps_satisfied: All dependencies for %{name} are satisfied.
    already_installed_unlink: |-
      %{name}-%{linked_name} already installed
      To install this version, first `brew unlink %{name}'
    bottle_install_fail: 'Bottle installation failed: building from source.'
    brew_link_error_1: An unexpected error occurred during the `brew link` step
    brew_link_error_2: The formula built, but is not symlinked into %{path}
    brew_link_not_complete: The `brew link` step did not complete successfully
    brew_link_possible_conflict: 'Possible conflicting files are:'
    brew_link_try_again_with: |-
      You can try again using:
        brew link %{name}
    caveats: Caveats
    cellar_bottle: Building source; cellar of %{name}'s bottle is %{cellar}
    cleaning: Cleaning
    cleaning_not_complete_1: The cleaning step did not complete successfully
    cleaning_not_complete_2: Still, the installation was successful, so we will link it into your prefix
    dep_message: "%{dep}: %{message}"
    deprecated_flag: "%{name}: %{old_flag} was deprecated; using %{new_flag} instead!"
    empty_installation: Empty installation
    failed_to_create_1: Failed to create %{path}
    failed_to_create_2: Things that depend on %{name} will probably not build.
    finishing_up: Finishing up
    fix_install_names_fail_1: Failed to fix install names
    fix_install_names_fail_2: |-
      The formula built, but you may encounter issues using it or linking other
      formulae against it.
    install_badge: "\U0001F37A"
    install_plist_failed: Failed to install plist file
    installing: Installing %{name_in_green}
    installing_dep_for: 'Installing %{name} dependency: %{dep_in_green}'
    installing_deps_for: 'Installing dependencies for %{name}: %{deps_in_green}'
    keg_already_linked: This keg was marked linked already, continuing anyway
    must_link_deps: You must `brew link %{deps}' before %{name} can be installed
    nothing_installed_to: Nothing was installed to %{path}
    postinstall_fail_1: The post-install step did not complete successfully
    postinstall_fail_2: You can try again using `brew postinstall %{name}`
    summary: "%{path}: %{path_info}"
    summary_title: Summary
    summary_with_build_time: "%{path}: %{path_info}, built in %{build_time}"
    unrecognized_bottle_arch: 'Unrecognized architecture for --bottle-arch: %{arch}'
  formulae:
    git:
      caveats: |
        The OS X keychain credential helper has been installed to:
          %{credential_helper_path}

        The "contrib" directory has been installed to:
          %{contrib_path}
      options:
        with-blk-sha1: Compile with the block-optimized SHA1 implementation
        with-brewed-curl: Use Homebrew's version of cURL library
        with-brewed-openssl: Build with Homebrew OpenSSL instead of the system version
        with-brewed-svn: Use Homebrew's version of Subversion
        with-persistent-https: Build git-remote-persistent-https from 'contrib' directory
        without-completions: Disable bash/zsh completions from 'contrib' directory
    node:
      caveats:
        with-icu4c: |
          Please note `icu4c` is built with a newer deployment target than Node and
          this may cause issues in certain usage. Node itself is built against the
          outdated `libstdc++` target, which is the root cause. For more information see:
            https://github.com/joyent/node/issues/7919

          If this is an issue for you, do `brew install node --without-icu4c`.
        without-npm: |
          Homebrew has NOT installed npm. If you later install it, you should supplement
          your NODE_PATH with the npm module folder:
            %{path}
      options:
        with-debug: Build with debugger hooks
        without-completion: npm bash completion will not be installed
        without-npm: npm will not be installed
  keg:
    already_exists: |-
      Target %{target} already exists. You may want to remove it:
        rm '%{target}'
    cannot_link: |-
      Cannot link %{name}
      Another version is already linked: %{path}
    cannot_symlink: Could not symlink %{path}
    cannot_symlink_dir_not_writable: |
      Could not symlink %{src}
      %{dest} is not writable.
    fname_alias_deprecated: Keg#fname is a deprecated alias for Keg#name and will be removed soon
    is_symlink: |-
      Target %{target} is a symlink belonging to %{conflict_name}. You can unlink it:
        brew unlink %{conflict_name}
    not_directory: "%{path} is not a directory"
    not_inside_keg: "%{path} is not inside a keg"
    not_valid_keg: "%{path} is not a valid keg"
    suggest_overwrite: |
      To force the link and overwrite all conflicting files:
        brew link --overwrite %{name}

      To list all files that would be deleted:
        brew link --overwrite --dry-run %{name}
  requirements:
    architecture_required: |
      This formula requires an %{arch} architecture.
    full_xcode_required: |
      A full installation of Xcode.app is required to compile this software.
      Installing just the Command Line Tools is not sufficient.
    full_xcode_required_with_version: |
      A full installation of Xcode.app %{version} is required to compile this software.
      Installing just the Command Line Tools is not sufficient.
    java_dependency:
      java_required: Java is required to install this formula.
      java_required_with_version: Java %{version} is required to install this formula.
    language_module_dependency:
      unsatisfied: |
        Unsatisfied dependency: %{module_name}
        Homebrew does not provide %{language} dependencies; install with:
          %{command}
    latex_required: |
      A LaTeX distribution is required for Homebrew to install this formula.

      Make sure that "/usr/texbin", or the location you installed it to, is in
      your PATH before proceeding.
    maximum_macos_requirement: OS X %{version} or older is required.
    minimum_macos_requirement: OS X %{version} or newer is required.
    osxfuse_dependency:
      already_installed: |
        osxfuse is already installed from the binary distribution and
        conflicts with this formula.
    ruby_requirement:
      ruby_version_is_required: Ruby %{version} is required to install this formula.
      version_required: RubyRequirement requires a version!
    unsigned_kext_requirement:
      forbidden_by_yosemite: |
        Building this formula from source isn't possible due to OS X
        Yosemite and above's strict unsigned kext ban.
    x11_dependency:
      xquartz_required: XQuartz is required to install this formula.
      xquartz_version_required: XQuartz %{version} is required to install this formula.
    xcode_install_hint: Xcode can be installed from https://developer.apple.com/downloads/
    xcode_install_hint_lion: Xcode can be installed from the App Store.
  sandbox:
    sandbox_profile: 'Sandbox profile:'
  software_spec:
    cxx11: Build using C++11 mode
    thirty_two_bit: Build 32-bit only
    universal: Build a universal binary
    with: Build with %{name} support
    without: Build without %{name} support
  tab:
    built_from_source: Built from source
    path_or_url: path or URL
    poured_from_bottle: Poured from bottle
  test:
    basic: This is a placeholder for Homebrew tests.
    interpolation: Homebrew tests are in %{path}
    pluralisation:
      one: There is %{count} bottle of beer on the wall.
      other: There are %{count} bottles of beer on the wall.
  utils:
    authentication_failed: |-
      GitHub %{error}
      HOMEBREW_GITHUB_API_TOKEN may be invalid or expired, check:
        https://github.com/settings/tokens
    cleaning_up: One sec, just cleaning up
    closed_pull_requests: 'Closed pull requests:'
    days:
      one: "%{count} day"
      other: "%{count} days"
    error_1: Error
    failed_to_connect: |-
      Failed to connect to: %{url}
      %{message}
    failed_to_parse_json: |-
      Failed to parse JSON response
      %{message}
    gem_installed_but_exec_not_in_path: |-
      The '%{gem}' gem is installed but couldn't find '%{executable}' in the PATH:
      %{path}
    hours:
      one: "%{count} hour"
      other: "%{count} hours"
    how_long_ago: "%{how_long} ago"
    in_the_future: in the future
    interactive_shell_abort: Aborting due to non-zero exit status
    item_with_star: "%{item}*"
    message_colored_w_arrow_colored: "%{arrow_color}==>%{message_color} %{message}%{reset_color}"
    message_w_intro_colored: "%{intro_color}%{intro}%{reset_color}: %{message}"
    minutes:
      one: "%{count} minute"
      other: "%{count} minutes"
    months:
      one: "%{count} month"
      other: "%{count} months"
    not_executable: "%{path} is not executable"
    open_pull_requests: 'Open pull requests:'
    path_component_invalid: 'The following PATH component is invalid: %{path}'
    plural_called: plural() was called; Y U NO I18N ;-)
    pull_request_with_url: "%{title} (%{html_url})"
    rate_limit_exceeded: |-
      GitHub %{error}
      Try again in %{duration}, or create a personal access token:
        https://github.com/settings/tokens
      and then set it as: HOMEBREW_GITHUB_API_TOKEN
    rate_limit_time_m_s: "%{n_minutes} %{n_seconds}"
    searching_pull_requests: Searching pull requests...
    seconds:
      one: "%{count} second"
      other: "%{count} seconds"
    using_editor_as_fallback: |-
      Using %{editor} because no editor was set in the environment.
      This may change in the future, so we recommend setting EDITOR, VISUAL,
      or HOMEBREW_EDITOR to your preferred text editor.
    warning: Warning
    weeks:
      one: "%{count} week"
      other: "%{count} weeks"
    years:
      one: "%{count} year"
      other: "%{count} years"
    years_with_months: "%{n_years}, %{n_months}"
